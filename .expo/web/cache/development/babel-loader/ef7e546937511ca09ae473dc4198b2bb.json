{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/riva/repos/giphy-it-to-me/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Google from 'expo-google-app-auth';\nvar IOS_CLIENT_ID = '872509857984-6vtqndded3e1dot20un6otbo7gfppi6g.apps.googleusercontent.com';\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.signInWithGoogle = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                iosClientId: IOS_CLIENT_ID,\n                success: ['profile', 'email']\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('LoginScreen.js', result.user.giveName);\n              props.navigation.navigate('Profile', {\n                username: result.user.giveName\n              });\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 10:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 11:\n              _context.next = 17;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.log('LoginScreen', _context.t0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 13]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, React.createElement(GoogleSigninButton, {\n        style: styles.signInButton,\n        size: GoogleSigninButton.Size.Wide,\n        color: GoogleSigninButton.Color.Dark,\n        onPress: function onPress() {\n          return signIn();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/riva/repos/giphy-it-to-me/screens/LoginScreen.js"],"names":["React","Component","Google","IOS_CLIENT_ID","LoginScreen","signInWithGoogle","logInAsync","iosClientId","success","result","type","console","log","user","giveName","props","navigation","navigate","username","accessToken","cancelled","error","styles","container","signInButton","GoogleSigninButton","Size","Wide","Color","Dark","signIn","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;;;;;AAEA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;AAEA,IAAMC,aAAa,GAAG,0EAAtB;;IAEqBC,W;;;;;;;;;;;;;;;;UACjBC,gB,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUH,MAAM,CAACI,UAAP,CAAmB;AACpCC,gBAAAA,WAAW,EAAEJ,aADuB;AAEpCK,gBAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,OAAZ;AAF2B,eAAnB,CAFV;;AAAA;AAELC,cAAAA,MAFK;;AAAA,oBAMRA,MAAM,CAACC,IAAP,KAAgB,SANR;AAAA;AAAA;AAAA;;AAOPC,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,MAAM,CAACI,IAAP,CAAYC,QAA1C;AACAC,cAAAA,KAAK,CAACC,UAAN,CAAiBC,QAAjB,CAA0B,SAA1B,EAAqC;AACjCC,gBAAAA,QAAQ,EAAET,MAAM,CAACI,IAAP,CAAYC;AADW,eAArC;AARO,+CAWAL,MAAM,CAACU,WAXP;;AAAA;AAAA,+CAaA;AAACC,gBAAAA,SAAS,EAAE;AAAZ,eAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBXT,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAhBW,+CAiBJ;AAACS,gBAAAA,KAAK,EAAE;AAAR,eAjBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAoBV;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,kBAAD;AACI,QAAA,KAAK,EAAED,MAAM,CAACE,YADlB;AAEI,QAAA,IAAI,EAAEC,kBAAkB,CAACC,IAAnB,CAAwBC,IAFlC;AAGI,QAAA,KAAK,EAAEF,kBAAkB,CAACG,KAAnB,CAAyBC,IAHpC;AAII,QAAA,OAAO,EAAE;AAAA,iBAAMC,MAAM,EAAZ;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAUH;;;;EAhCoC7B,S;;SAApBG,W;AAmCrB,IAAMkB,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC7BT,EAAAA,SAAS,EAAE;AACPU,IAAAA,IAAI,EAAC,CADE;AAEPC,IAAAA,eAAe,EAAC,MAFT;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React, {Component } from 'react';\nimport {Text, View, StyleSheet, Button } from 'react-native';\nimport * as Google from 'expo-google-app-auth';\n\nconst IOS_CLIENT_ID = '872509857984-6vtqndded3e1dot20un6otbo7gfppi6g.apps.googleusercontent.com';\n\nexport default class LoginScreen extends Component {\n    signInWithGoogle = async () => {\n        try {\n            const result = await Google.logInAsync ({\n                iosClientId: IOS_CLIENT_ID,\n                success: ['profile', 'email']\n            })\n            if(result.type === 'success') {\n                console.log('LoginScreen.js', result.user.giveName);\n                props.navigation.navigate('Profile', {\n                    username: result.user.giveName\n                })\n                return result.accessToken;\n            } else {\n                return {cancelled: true};\n            }\n        } catch (err){\n            console.log('LoginScreen', err);\n            return {error: true}\n        }\n    } \n    render() {\n        return(\n            <View style={styles.container}>\n                <GoogleSigninButton\n                    style={styles.signInButton}\n                    size={GoogleSigninButton.Size.Wide}\n                    color={GoogleSigninButton.Color.Dark}\n                    onPress={() => signIn()}\n                />\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex:1,\n        backgroundColor:'#fff',\n        alignItems: 'center',\n        justifyContent: 'center', \n   }\n})"]},"metadata":{},"sourceType":"module"}